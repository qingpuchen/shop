/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateVipUserArgs } from "./CreateVipUserArgs";
import { UpdateVipUserArgs } from "./UpdateVipUserArgs";
import { DeleteVipUserArgs } from "./DeleteVipUserArgs";
import { VipUserFindManyArgs } from "./VipUserFindManyArgs";
import { VipUserFindUniqueArgs } from "./VipUserFindUniqueArgs";
import { VipUser } from "./VipUser";
import { VipUserService } from "../vipUser.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => VipUser)
export class VipUserResolverBase {
  constructor(
    protected readonly service: VipUserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "VipUser",
    action: "read",
    possession: "any",
  })
  async _vipUsersMeta(
    @graphql.Args() args: VipUserFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [VipUser])
  @nestAccessControl.UseRoles({
    resource: "VipUser",
    action: "read",
    possession: "any",
  })
  async vipUsers(
    @graphql.Args() args: VipUserFindManyArgs
  ): Promise<VipUser[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => VipUser, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "VipUser",
    action: "read",
    possession: "own",
  })
  async vipUser(
    @graphql.Args() args: VipUserFindUniqueArgs
  ): Promise<VipUser | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VipUser)
  @nestAccessControl.UseRoles({
    resource: "VipUser",
    action: "create",
    possession: "any",
  })
  async createVipUser(
    @graphql.Args() args: CreateVipUserArgs
  ): Promise<VipUser> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VipUser)
  @nestAccessControl.UseRoles({
    resource: "VipUser",
    action: "update",
    possession: "any",
  })
  async updateVipUser(
    @graphql.Args() args: UpdateVipUserArgs
  ): Promise<VipUser | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VipUser)
  @nestAccessControl.UseRoles({
    resource: "VipUser",
    action: "delete",
    possession: "any",
  })
  async deleteVipUser(
    @graphql.Args() args: DeleteVipUserArgs
  ): Promise<VipUser | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
